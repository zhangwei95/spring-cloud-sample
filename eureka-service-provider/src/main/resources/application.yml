#应用名称及验证账号
spring:
  application:
    name: service-provider
eureka:
  client:
    #设置服务注册中心的URL
    service-url:
      # host 配置 ip映射
      defaultZone: http://root:root@eureka-server:18761/eureka/
  instance:
    #服务刷新时间配置，每隔这个时间会主动心跳一次
    lease-renewal-interval-in-seconds: 1
    #服务过期时间配置,超过这个时间没有接收到心跳EurekaServer就会将这个实例剔除
    lease-expiration-duration-in-seconds: 1
    virtual-host-name: service-provider
#    instance-id: service-provider
#    hostname: localhost
  #zipkin
  zipkin:
    base-url: http://localhost:9411/
    #采样比例1
  sleuth:
    sampler:
      rate: 1

management:
  endpoints:
    web:
      exposure:
        #yml加双引号，properties不用加
        include: "*"
    health:
      ##默认是never
      show-details: ALWAYS
      enabled: true




jhipster:
  # Thread pool that will be used for asynchronous method calls in JHipster
  async:
    core-pool-size: 50 # Initial pool size
    max-pool-size: 200 # Maximum pool size
    queue-capacity: 10000 # Queue capacity of the pool

  # Specific configuration for JHipster gateways
  # See https://www.jhipster.tech/api-gateway/ for more information on JHipster gateways
  gateway:
    rate-limiting:
      enabled: false # Rate limiting is disabled by default
      limit: 100000 # By default we allow 100,000 API calls
      duration-in-seconds: 3600 # By default the rate limiting is reinitialized every hour
    authorized-microservices-endpoints: # Access Control Policy, if left empty for a route, all endpoints will be accessible
      app1: /api # recommended prod configuration, it allows the access to all API calls from the "app1" microservice

  # HTTP configuration
  http:
    # V_1_1 for HTTP/1.1 or V_2_0 for HTTP/2.
    # To use HTTP/2 you will need SSL support (see the Spring Boot "server.ssl" configuration)
    version: V_1_1
    #Force the server cipher suite to follow the exact order specifying in server.ssl.ciphers (For perfect forward secrecy)
    useUndertowUserCipherSuitesOrder: true
    cache: # Used by io.github.jhipster.web.filter.CachingHttpHeadersFilter
      timeToLiveInDays: 1461 # Static assets are cached for 4 years by default

  # E-mail properties
  mail:
    enabled: false # If e-mail sending is enabled. The standard `spring.mail` keys will need to be configured
    from: hailong@ideal-link.com # The default "from" address for e-mails
    base-url: http://127.0.0.1:8080 # URL to the application, used inside e-mails

  # Spring Security specific configuration
  security:
    #        remember-me: # JHipster secure implementation of the remember-me mechanism, for session-based authentication
    #            # security key (this key should be unique for your application, and kept secret)
    #            key: 0b32a651e6a65d5731e869dc136fb301b0a8c0e4
    client-authorization: # Used with JHipster UAA authentication
      access-token-uri: # URL of the JHipster UAA server OAuth tokens
      token-service-id: # ID of the current application
      client-id: # OAuth client ID
      client-secret: # OAuth client secret
    authentication:
      jwt: # JHipster specific JWT implementation
        # The secret token should be encoded using Base64 (you can type `echo 'secret-key'|base64` on your command line).
        # If both properties are configured, the `secret` property has a higher priority than the `base64-secret` property.
        secret: # JWT secret key in clear text (not recommended)
        base64-secret:  # JWT secret key encoded in Base64 (recommended)
        token-validity-in-seconds: 86400 # Token is valid 24 hours
        token-validity-in-seconds-for-remember-me: 2592000 # Remember me token is valid 30 days

  # By default cross-origin resource sharing (CORS) is enabled in "dev" mode for
  # monoliths and gateways.
  # It is disabled by default in "prod" mode for security reasons, and for microservices
  # (as you are supposed to use a gateway to access them).
  # This configures a standard org.springframework.web.cors.CorsConfiguration
  # Note that "exposed-headers" is mandatory for JWT-based security, which uses
  # the "Authorization" header, and which is not a default exposed header.

---
spring:
  profiles: 9003
server:
  #服务端口
  port: 9003

---
spring:
  profiles: 9004
server:
  #服务端口
  port: 9004